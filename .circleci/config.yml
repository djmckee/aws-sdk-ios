# iOS CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/ios-migrating-from-1-2/ for more details
#
version: 2
jobs:
  build:

    macos: 
      xcode: "10.1.0"
    steps:
      - checkout
      - run:
          name: create credentials
          command: |
            echo ${AWS_CREDENTIALS}  | base64 --decode  > AWSCoreTests/Resources/credentials.json      
      - run:
          name: build sdk
          command: xcodebuild  build-for-testing -project AWSiOSSDKv2.xcodeproj -scheme AWSAllTests -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 8,OS=11.2'      
   



  test:
    macos:
      xcode: "10.0.0"
    steps:
      - checkout
      - run:
          name: create credentials
          command: |
            echo ${AWS_CREDENTIALS}  | base64 --decode  > AWSCoreTests/Resources/credentials.json    
       #     cat AWSCoreTests/Resources/credentials.json 

      - run:
          name: build sdk
          command: xcodebuild  build-for-testing -project AWSiOSSDKv2.xcodeproj -scheme AWSAllTests -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 8,OS=11.2'      
  
      - run :
          name: unitest
          command: |
            mkdir test_result
            bash runtest.sh  AWSAPIGatewayUnitTests
            bash runtest.sh  AWSAutoScalingUnitTests     
            bash runtest.sh  AWSCloudWatchUnitTests

            bash runtest.sh  AWSCognitoAuthUnitTests
            bash runtest.sh  AWSCognitoIdentityProviderUnitTests
            bash runtest.sh  AWSCognitoUnitTests
            bash runtest.sh  AWSComprehendUnitTests
            bash runtest.sh  AWSCoreUnitTests
            bash runtest.sh  AWSDynamoDBUnitTests
            bash runtest.sh  AWSEC2UnitTests
            bash runtest.sh  AWSElasticLoadBalancingUnitTests
            bash runtest.sh  AWSIoTUnitTests
            bash runtest.sh  AWSKMSUnitTests
            bash runtest.sh  AWSKinesisUnitTests
            bash runtest.sh  AWSKinesisVideoUnitTests
            bash runtest.sh  AWSKinesisVideoArchivedMediaUnitTests
            bash runtest.sh  AWSLambdaUnitTests
            bash runtest.sh  AWSLexUnitTests
            bash runtest.sh  AWSLogsUnitTests
            bash runtest.sh  AWSMachineLearningUnitTests
            bash runtest.sh  AWSMobileAnalyticsUnitTests
            bash runtest.sh  AWSPinpointUnitTests
            bash runtest.sh  AWSPollyUnitTests
            bash runtest.sh  AWSRekognitionUnitTests
            bash runtest.sh  AWSS3UnitTests
            bash runtest.sh  AWSSESUnitTests
            bash runtest.sh  AWSSNSUnitTests
            bash runtest.sh  AWSSQSUnitTests
            bash runtest.sh  AWSSimpleDBUnitTests
            bash runtest.sh  AWSTranscribeUnitTests
            bash runtest.sh  AWSTranslateUnitTests
     
          #xcodebuild -project AWSiOSSDKv2.xcodeproj -scheme AWSCloudWatch -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 8'  -only-testing:AWSCloudWatchUnitTests  test  | xcpretty  
      - run:
          name : check result 
          command : bash check_unitest_result.sh
      - store_artifacts:
          path: test_result

  release_carthage:
    # Specify the Xcode version to useeifjcchundvbvrjtlkebuvkljfrvhgnhkeijfdkccdtl
    
    macos:
      xcode: "10.1.0"
    steps: 
      - checkout

      - run:
          name: create credentials
          command: |
            echo ${AWS_CREDENTIALS}  | base64 --decode  > AWSCoreTests/Resources/credentials.json  

      - run:
          name: install carthage
          command: |
            carthage version
            git clone https://github.com/sunchunqiang/customcarthage
          #  brew uninstall --force carthage
           # brew install https://github.com/Homebrew/homebrew-core/raw/df3be3a1882f7d2ea98efac4c9a1f37792b7097b/Formula/carthage.rb

          #brew outdated carthage || brew upgrade carthage
      - run:
          name: build 
          command: |
            instruments -s devices
            xcodebuild -project AWSiOSSDKv2.xcodeproj -scheme AWSAllTests -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 8,OS=11.2' build     
      - run:
          name: Build Cathage
          command: |
            carthage build --no-skip-current | tee buildout.txt
          no_output_timeout: 100m
      - run:
          name: Create Cathage Archive
          command: |
            bash CreateCarthageArchive.sh   
          no_output_timeout: 30m


  release_cocoapods:
    # Specify the Xcode version to use
    macos:
      xcode: "10.0.0"
    steps:
      - checkout  
      - run:
          name: Release cocoapods
          command : python3    cocoapods_release.py
  release_appledoc:
    # Specify the Xcode version to use
    macos:
      xcode: "9.2.0"
    steps:
      - checkout  
 
      - run:
          name: Install appledoc 
          command: |
            pwd
            pushd $TMPDIR
            git clone https://github.com/tomaz/appledoc
            cd appledoc
            bash install-appledoc.sh -t default
            popd 
            pwd

      - run:
          name: generate documents
          command: bash ./Scripts/GenerateAppleDocs.sh

      - run:
          name: copy documents
          command: |
            git checkout  gh-pages
            cp -R docs/html/*   docs/reference/

      - run:
          name: checkin documents
          command: |
            git add docs/reference
            git commit -m "Update document via CircleCI"
            git push -q https://${GITHUB_TOKEN}@github.com/aws/aws-sdk-ios.git  

workflows:
  version: 2
  build_and_test:
    jobs: 
      - build:
          filters:
            branches:
              only: testcirclecixx
      - test:
      #    requires:
       #     - build
          filters:
            branches:
              only: testcircleci
      - release_carthage:
          filters:
            branches:
              only: testcirclecixx



      - release_cocoapods:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^test[0-9]+.[0-9]+.[0-9]+$/
      - release_appledoc:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^test[0-9]+.[0-9]+.[0-9]+$/
